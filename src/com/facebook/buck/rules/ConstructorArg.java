/*
 * Copyright 2012-present Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

package com.facebook.buck.rules;

/**
 * Marker interface for java objects that acts as arguments to {@link ConstructorArgMarshaller}.
 *
 * The constructor arg is examined for public fields. Reflection is used to determine the type of
 * the field, and it's possible to indicate that a field isn't mandatory by using
 * {@link com.google.common.base.Optional} declarations. If the name of the property to be exposed
 * to a build file does not match the field name, then a {@link Hint} can be used to set it.
 *
 * As an example, the arguments for a build target defined as:
 * <pre>
 *    example_library(
 *      name = 'example',
 *      srcs = [ '//foo:bar', 'Eggs.java', ],
 *      optional_thing = True,
 *    )
 * </pre>
 * Could be defined as a constructor arg that looks like:
 * <pre>
 *     public class ExampleLibraryArg {
 *       public String name;
 *       public ImmutableSortedSet&gt;SourcePath> srcs;
 *       @Hint(name = "optional_thing")
 *       public Optional&gt;Boolean> isNeeded;
 *     }
 * </pre>
 *
 * Values for individual fields are coerced from the java object representations of the json
 * generated by the python build rules by instances of
 * {@link com.facebook.buck.rules.coercer.TypeCoercer}.
 *
 * See {@link com.facebook.buck.rules.coercer.TypeCoercerFactory} supported types, and how the type
 * coercer is picked given an input type.
 */
public interface ConstructorArg {
}
