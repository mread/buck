

function gitFetchFailed()
{
  echo >&2
  echo >&2 "Failed to fetch Buck updates from git."
  echo >&2 "You can disable this by creating a '.nobuckcheck' file in your repository,"
  echo >&2 "but this might lead to strange bugs or build failures."
  exit 1
}

function checkForAnt()
{
  if [ -z `command -v ant` ]; then
    echo >&2 "You do not have ant on your \$PATH. Cannot build Buck."
    if [[ "$OSTYPE" =~ ^darwin ]] && [ ! -z `command -v brew` ]; then
      echo >&2 "Try running 'brew install ant'."
    fi
    exit 1
  fi
}

function printAntFailedMessage()
{
    echo >&2 " :: 'ant' failed in the buck repo at $PWD."
    if [ -d ".git" ]; then
      echo >&2 " :: Try changing to that directory and running 'git clean -xfd'."
    else
      echo >&2 " :: Try changing to that directory and deleting the 'build' "
      echo >&2 " :: directory."
    fi
    exit 1
}

function cleanup() {
  if [ -n "$BUCK_TMPDIR" ]; then
    rm -rf "$BUCK_TMPDIR"
  fi
}

function setBuckdRunning() {
  BUCKD_RUNNING=0
  kill -0 `cat "$BUCKD_PID_FILE" 2> /dev/null` &> /dev/null || BUCKD_RUNNING=1
}

function killBuckd() {
  # Kill any existing buckd process.
  if [ $BUCKD_RUNNING -eq 0 ] && [ -n "$BUCKD_PID_FILE" ]; then
    echo >&2 "Killing existing buckd process"
    BUCK_PID=$(cat "$BUCKD_PID_FILE")
    kill $BUCK_PID &> /dev/null || true
    WAIT_COUNT=1
    echo >&2 "Waiting for existing buckd process to exit"
    while [ $(ps -p $BUCK_PID &> /dev/null; echo $? || true) -eq 0 ];
      do sleep 0.1
      WAIT_COUNT=$((WAIT_COUNT + 1))
      if [ $WAIT_COUNT -gt 100 ]; then
        echo >&2 "Could not kill existing buckd process after 10 seconds!"
        exit 1
      fi
    done
  fi
  rm -rf "${BUCKD_DIR}"
  HAS_TRIGGERS=$(python <<-EOT
import json
print bool(json.loads("""$(watchman trigger-list $PWD)""").get("triggers", None))
EOT
)
  if [ "${HAS_TRIGGERS}" != "True" ]; then
    watchman watch-del "$PROJECT_ROOT" > /dev/null || true
  fi
  setBuckdRunning
}

function startBuckdIfStopped() {
  if [ $BUCKD_RUNNING -eq 1 ] && [ -e "${BUCK_BIN_DIRECTORY}/buckd" ]; then
    pushd "$PROJECT_ROOT" > /dev/null
    "${BUCK_BIN_DIRECTORY}/buckd"
    setBuckdRunning
    popd > /dev/null
  fi
}

# Record the directory from which this script was run in case
# we need to re-run it as part of the autoupdate.
ORIGINAL_WORKING_DIRECTORY="$PWD"

# Keep track of the project root directory.
PROJECT_ROOT="$PWD"

# Navigate upwards until either a .buckconfig file is found or the root directory is reached.
if [ "$*" != '--version' ] && [ "$*" != '-V' ]; then
  while ! [ -f "$PROJECT_ROOT/.buckconfig" ] && [ "$PROJECT_ROOT" != "/" ] ; do
    cd ..
    PROJECT_ROOT="$PWD"
  done

  if ! [ -f "$PROJECT_ROOT/.buckconfig" ] ; then
    echo >&2 'This does not appear to be the root of a Buck project.'
    echo >&2 'Please "cd" to the root of your project before running buck.'
    echo >&2 'If this really is the root of your project, run "touch .buckconfig"'
    echo >&2 'then re-run your buck command.'
    exit 1
  fi
fi


# Create a local temp directory to be deleted at the end of this invocation of buck.
BUCK_TMPDIR_ROOT="${PROJECT_ROOT}/buck-out/tmp"
mkdir -p "$BUCK_TMPDIR_ROOT"
BUCK_TMPDIR=$(mktemp -d "${BUCK_TMPDIR_ROOT}/buck_run.XXXXXXXXXX")
trap cleanup EXIT

# Navigate to the root of the Buck project.
pushd "$BUCK_BIN_DIRECTORY/.." > /dev/null
BUCK_DIRECTORY="$PWD"
BUCK_SUCCESS_FILE="build/successful-build"

# If there is a .buckversion file in the project root, then make sure that Buck is at that version.
# The only way to override this is to include a .nobuckcheck file in the project root.
if [ -e "${PROJECT_ROOT}/.nobuckcheck" ]; then
  # Stop this warning from being printed twice when buck invokes buckd.
  if [ ! $ALREADY_PRINTED_NOBUCKCHECK_WARNING ] ; then
    export ALREADY_PRINTED_NOBUCKCHECK_WARNING=1
    echo >&2 ":::"
    echo >&2 "::: '.nobuckcheck' file is present.  Not updating buck"
    echo >&2 ":::"
  fi
elif [ -e "${PROJECT_ROOT}/.buckversion" ]; then
  BUCK_COMMIT_HASH_AND_BRANCH=`cat "${PROJECT_ROOT}/.buckversion"`

  BUCK_REQUIRED_VERSION=`echo ${BUCK_COMMIT_HASH_AND_BRANCH} | awk -F':' '{print $1}'`
  BUCK_REQUIRED_BRANCH=`echo ${BUCK_COMMIT_HASH_AND_BRANCH} |  awk -F':' '{print $2}'`

  # If the hash is in not in the user's repository, do a `git fetch`.
  if ! git cat-file -e "$BUCK_REQUIRED_VERSION"; then
    if [ -e "${BUCK_REQUIRED_BRANCH}" ]; then
      git fetch --all >&2 || gitFetchFailed
    else
      git fetch origin $BUCK_REQUIRED_BRANCH >&2 || gitFetchFailed
    fi
  fi


  BUCK_CURRENT_VERSION=`git rev-parse HEAD`
  
  function restartBuck()
  {
    # Rerun command with new version of buck.
    cd "$ORIGINAL_WORKING_DIRECTORY"
    "$SOURCE" "$@"
    exit $?
  }

  # Note that this test succeeds if you have local changes in your Buck repository that have not
  # been committed.
  if [ "$BUCK_REQUIRED_VERSION" != "$BUCK_CURRENT_VERSION" ]; then
    echo >&2 "Buck is at ${BUCK_CURRENT_VERSION},"
    echo >&2 "but should be ${BUCK_REQUIRED_VERSION}."
    echo >&2 "Buck is updating itself."
    echo >&2 "To disable this, add a '.nobuckcheck' file to your project root."
    echo >&2 "In general, you should only disable this if you are developing Buck."

    # Now that the version is guaranteed to be in the user's repository,
    # checkout that hash.
    git checkout $BUCK_REQUIRED_VERSION >&2

    # Now that we have updated the repository, we should rebuild Buck.
    rm -f "$BUCK_SUCCESS_FILE"
    checkForAnt
    ant clean >&2
    if [ $? -ne 0 ]; then
      printAntFailedMessage
    fi

    # Rerun this script after checking out the new version.
    restartBuck $@
  fi
fi

# Get current buck version.
if [ -z "$BUCK_REPOSITORY_DIRTY" ]; then
  # Whether or not the repo is dirty (contains untracked files or modified
  # tracked files).
  BUCK_REPOSITORY_DIRTY=0

  # Whether or not the repo contains changes to tracked files.
  BUCK_REPOSITORY_LOCAL_CHANGES=0
  BUCK_CURRENT_VERSION="N/A"
  BUCK_VERSION_TIMESTAMP=-1
  if [ -d ".git" ]; then
    # Make sure buck gets passed the right version.
    BUCK_CURRENT_VERSION=`git rev-parse HEAD`
    BUCK_VERSION_TIMESTAMP=`git log --pretty=format:%ct -1 HEAD`

    # if the output of "git status -s" is non-empty.
    if [ -n "`git status -s`" ]; then
      BUCK_REPOSITORY_DIRTY=1
    fi
    # If the output of "git ls-files -m" is non-empty, buck has local changes to
    # tracked files that can't be cleaned automatically with `git clean -fd`.
    if [ -n "`git ls-files -m`" ]; then
      BUCK_REPOSITORY_LOCAL_CHANGES=1
    fi
  fi
fi

# Compute a version string that uniquely incorporates the current git revision
# and local modifications (if any) to managed files that are relevant to
# building/running the buck application.
if [ "${BUCK_REPOSITORY_DIRTY}" = "0" ] ; then
  BUCK_VERSION_UID="${BUCK_CURRENT_VERSION}"
else
  if [ -d ".git" ] ; then
    function computeLocalHash()
    {
      # Get git tree for current revision.
      git_tree_in=`git log -n1 --pretty=format:%T HEAD`

      # Generate git tree as it would exist if current local changes were
      # committed.
      git_tree_out=$(
        git_index_file=`mktemp "${BUCK_TMPDIR}/buck-git-index.XXXXXX"` || exit 1
        export GIT_INDEX_FILE="${git_index_file}"
        git read-tree ${git_tree_in} || exit 1
        git update-index --add --remove `git diff --name-only HEAD` || exit 1
        git write-tree || exit 1
        rm -f "${git_index_file}"
      )

      # Compute UID based on relevant portions of the output git tree.
      buck_version_uid_input=`mktemp "${BUCK_TMPDIR}/buck-version-uid-input.XXXXXX"` || exit 1
      git ls-tree --full-tree ${git_tree_out} > "${buck_version_uid_input}" || exit 1
      BUCK_VERSION_UID=`git hash-object "${buck_version_uid_input}"` || exit 1
      rm -f "${buck_version_uid_input}"
    }
    if [ -e "${PROJECT_ROOT}/.nobuckcheck" ] || [ ! -e "${PROJECT_ROOT}/.buckversion" ]; then
      computeLocalHash
    else
      if [ "${BUCK_REPOSITORY_LOCAL_CHANGES}" = "1" ] ; then
        # If the buck repo is dirty but has local changes, warn the user, but we
        # can't clean the repo for them.
        echo >&2 ":: Your buck directory has local modifications, and therefore"
        echo >&2 ":: builds will not be able to use a distributed cache."
        echo >&2 ":: The following files must be either reverted or committed:"
        git ls-files -m >&2
        BUCK_CLEAN_REPO_IF_DIRTY=N
      fi
      if [ -z "$BUCK_CLEAN_REPO_IF_DIRTY" ]; then
        echo >&2 ":: Your local buck directory is dirty, and therefore builds will"
        echo >&2 ":: not be able to use a distributed cache."
        # Only read from stdin if we're talking to an interactive
        # terminal. Otherwise, the script will appear to hang forever
        # as it reads from stdin with no human being on the other side.
        if [ -t 1 ]; then
            echo >&2 ":: Do you want to clean your buck directory? [y/N]"
            read BUCK_CLEAN_REPO_IF_DIRTY
        fi
      fi
      if [[ "$(echo $BUCK_CLEAN_REPO_IF_DIRTY | tr '[:lower:]' '[:upper:]')" =~ ^Y.* ]]; then
        git clean -fd >&2
        # Restart buck just in case the files we just deleted in any way
        # affected this file.
        restartBuck $@
      else
        computeLocalHash
      fi
    fi
  else
    BUCK_VERSION_UID="N/A"
  fi
fi

if [ -z "${MAX_BUCKD_RUNS}" ]; then
  MAX_BUCKD_RUNS=64
fi

function killAutoBuildIfRunning() {
  (cat "${BUCKD_DIR}"/autobuild.pid | xargs kill || true) &> /dev/null
}

# Test for running buck daemon.
BUCKD_DIR="${PROJECT_ROOT}/.buckd"
BUCKD_LOG_FILE="${BUCKD_DIR}/buckd.log"
BUCKD_PID_FILE="${BUCKD_DIR}/buckd.pid"
BUCKD_PORT_FILE="${BUCKD_DIR}/buckd.port"
BUCKD_RUN_COUNT_FILE="${BUCKD_DIR}/buckd.runcount"
BUCKD_VERSION_FILE="${BUCKD_DIR}/buckd.version"

killAutoBuildIfRunning
setBuckdRunning

for ARG in $@; do
  if [ "${ARG}" = "clean" ]; then
    killBuckd
    break
  fi
done

BUCKD_NEEDS_STARTING=1
CURRENT_BUCKD_RUN_COUNT=0
if [ -e "${BUCKD_RUN_COUNT_FILE}" ]; then
  CURRENT_BUCKD_RUN_COUNT=$(cat "${BUCKD_RUN_COUNT_FILE}")
  if [ $CURRENT_BUCKD_RUN_COUNT -ge $MAX_BUCKD_RUNS ]; then
    killBuckd
    BUCKD_NEEDS_STARTING=0
    CURRENT_BUCKD_RUN_COUNT=0
  fi
fi

if [ -e "${BUCKD_VERSION_FILE}" ]; then
  RUNNING_BUCKD_VERSION=$(cat "${BUCKD_VERSION_FILE}")
  if [ $RUNNING_BUCKD_VERSION != $BUCK_VERSION_UID ]; then
    killBuckd
    BUCKD_NEEDS_STARTING=0
    CURRENT_BUCKD_RUN_COUNT=0
  fi
fi

if [ $BUCKD_RUNNING -eq 0 ] && [ -e "${BUCKD_RUN_COUNT_FILE}" ]; then
 echo $((CURRENT_BUCKD_RUN_COUNT + 1)) > "${BUCKD_RUN_COUNT_FILE}"
fi

# Make sure that Buck has been built.
if [ ! -e "$BUCK_SUCCESS_FILE" ]; then

  BUCKD_WAS_RUNNING=$BUCKD_RUNNING
  if [ $BUCKD_RUNNING -eq 0 ] && [ -e "$BUCKD_PID_FILE" ]; then
    echo >&2 "Killing buckd before building buck"
    killBuckd
  fi

  echo >&2 "Buck does not appear to have been built -- building Buck!"
  checkForAnt
  (
    set -e
    ant clean >&2 && ant >&2
  )
  if [ $? -ne 0 ]; then
    printAntFailedMessage
  fi
  if [ $BUCKD_WAS_RUNNING -eq 0 ]; then
    BUCKD_NEEDS_STARTING=0
  fi
fi

if [ $BUCKD_NEEDS_STARTING -eq 0 ]; then
  startBuckdIfStopped
fi


# Pop back to the original directory.
popd > /dev/null

# Path to Python interpreter will be tried to find. If not found, Jython will be used.
PYTHON_INTERP_FALLBACK="${BUCK_DIRECTORY}/bin/jython"

# Note that if $RELATIVE_PATH_TO_BUCK_PY changes, then the default value of
# com.facebook.buck.json.BuildFileToJsonParser#PATH_TO_BUCK_PY 
# needs to be updated.
RELATIVE_PATH_TO_BUCK_PY=src/com/facebook/buck/parser/buck.py
PATH_TO_BUCK_PY="${BUCK_DIRECTORY}/$RELATIVE_PATH_TO_BUCK_PY"

# This file will be placed into buck-out/bin/xcode-scripts/ when a project's
# target has a dependency on asset catalogs
PATH_TO_XCODE_SCRIPTS="${BUCK_DIRECTORY}/src/com/facebook/buck/apple"
PATH_TO_COMPILE_ASSET_CATALOGS_PY="${PATH_TO_XCODE_SCRIPTS}/compile_asset_catalogs.py"
PATH_TO_COMPILE_ASSET_CATALOGS_BUILD_PHASE_SH="${PATH_TO_XCODE_SCRIPTS}/compile_asset_catalogs_build_phase.sh"

BUCK_PATH_TO_CUSTOM_DX="${BUCK_DIRECTORY}/third-party/java/dx-from-kitkat/etc/dx"

# Run Buck "unpacked": specifying its individual classpath elements rather than from a
# single monolithic JAR file that includes all of its dependencies. This speeds up Buck development
# because `ant compile` takes much less time to rebuild Buck than `ant jar` does.
BUCK_JAVA_CLASSPATH=\
"${BUCK_DIRECTORY}"/src:\
"${BUCK_DIRECTORY}"/build/classes:\
"${BUCK_DIRECTORY}"/build/dx_classes:\
"${BUCK_DIRECTORY}"/lib/args4j-2.0.28.jar:\
"${BUCK_DIRECTORY}"/lib/ddmlib-22.5.3.jar:\
"${BUCK_DIRECTORY}"/lib/guava-15.0.jar:\
"${BUCK_DIRECTORY}"/lib/ini4j-0.5.2.jar:\
"${BUCK_DIRECTORY}"/lib/jackson-annotations-2.0.5.jar:\
"${BUCK_DIRECTORY}"/lib/jackson-core-2.0.5.jar:\
"${BUCK_DIRECTORY}"/lib/jackson-databind-2.0.5.jar:\
"${BUCK_DIRECTORY}"/lib/jsr305.jar:\
"${BUCK_DIRECTORY}"/lib/nailgun-server-0.9.2-SNAPSHOT.jar:\
"${BUCK_DIRECTORY}"/lib/sdklib.jar:\
"${BUCK_DIRECTORY}"/third-party/java/asm/asm-debug-all-4.1.jar:\
"${BUCK_DIRECTORY}"/third-party/java/astyanax/astyanax-cassandra-1.56.38.jar:\
"${BUCK_DIRECTORY}"/third-party/java/astyanax/astyanax-core-1.56.38.jar:\
"${BUCK_DIRECTORY}"/third-party/java/astyanax/astyanax-thrift-1.56.38.jar:\
"${BUCK_DIRECTORY}"/third-party/java/astyanax/cassandra-1.2.3.jar:\
"${BUCK_DIRECTORY}"/third-party/java/astyanax/cassandra-thrift-1.2.3.jar:\
"${BUCK_DIRECTORY}"/third-party/java/astyanax/commons-cli-1.1.jar:\
"${BUCK_DIRECTORY}"/third-party/java/astyanax/commons-codec-1.2.jar:\
"${BUCK_DIRECTORY}"/third-party/java/astyanax/commons-lang-2.6.jar:\
"${BUCK_DIRECTORY}"/third-party/java/astyanax/high-scale-lib-1.1.2.jar:\
"${BUCK_DIRECTORY}"/third-party/java/astyanax/joda-time-2.2.jar:\
"${BUCK_DIRECTORY}"/third-party/java/astyanax/libthrift-0.7.0.jar:\
"${BUCK_DIRECTORY}"/third-party/java/astyanax/log4j-1.2.16.jar:\
"${BUCK_DIRECTORY}"/third-party/java/astyanax/slf4j-api-1.7.2.jar:\
"${BUCK_DIRECTORY}"/third-party/java/astyanax/slf4j-log4j12-1.7.2.jar:\
"${BUCK_DIRECTORY}"/third-party/java/closure-templates/soy-2012-12-21-no-guava.jar:\
"${BUCK_DIRECTORY}"/third-party/java/gson/gson-2.2.4.jar:\
"${BUCK_DIRECTORY}"/third-party/java/eclipse/org.eclipse.core.contenttype_3.4.200.v20130326-1255.jar:\
"${BUCK_DIRECTORY}"/third-party/java/eclipse/org.eclipse.core.jobs_3.5.300.v20130429-1813.jar:\
"${BUCK_DIRECTORY}"/third-party/java/eclipse/org.eclipse.core.resources_3.8.101.v20130717-0806.jar:\
"${BUCK_DIRECTORY}"/third-party/java/eclipse/org.eclipse.core.runtime_3.9.100.v20131218-1515.jar:\
"${BUCK_DIRECTORY}"/third-party/java/eclipse/org.eclipse.equinox.common_3.6.200.v20130402-1505.jar:\
"${BUCK_DIRECTORY}"/third-party/java/eclipse/org.eclipse.equinox.preferences_3.5.100.v20130422-1538.jar:\
"${BUCK_DIRECTORY}"/third-party/java/eclipse/org.eclipse.jdt.core_3.9.2.v20140114-1555.jar:\
"${BUCK_DIRECTORY}"/third-party/java/eclipse/org.eclipse.osgi_3.9.1.v20140110-1610.jar:\
"${BUCK_DIRECTORY}"/third-party/java/dd-plist/dd-plist.jar:\
"${BUCK_DIRECTORY}"/third-party/java/jetty/jetty-all-9.0.4.v20130625.jar:\
"${BUCK_DIRECTORY}"/third-party/java/jetty/servlet-api.jar:\
"${BUCK_DIRECTORY}"/third-party/java/xz-java-1.3/xz-1.3.jar:\
"${BUCK_DIRECTORY}"/third-party/java/commons-compress/commons-compress-1.8.1.jar:\

BUCK_PROJECT_JAVA_ARGS_FILE="${PROJECT_ROOT}/.buckjavaargs"
if [[ -r "${BUCK_PROJECT_JAVA_ARGS_FILE}" ]]; then
  BUCK_PROJECT_JAVA_ARGS=$(cat "${BUCK_PROJECT_JAVA_ARGS_FILE}")
else
  BUCK_PROJECT_JAVA_ARGS=
fi

BUCK_JAVA_ARGS=( \
  -XX:MaxPermSize=256m \
  -Xmx1000m \
  -Djava.awt.headless=true \
  -Djava.util.logging.config.class=com.facebook.buck.log.LogConfig \
  -Dbuck.testrunner_classes="${BUCK_DIRECTORY}"/build/testrunner/classes \
  -Dbuck.abi_processor_classes="${BUCK_DIRECTORY}"/build/abi_processor/classes \
  -Dbuck.path_to_emma_jar="${BUCK_DIRECTORY}"/third-party/java/emma-2.0.5312/out/emma-2.0.5312.jar \
  -Dbuck.test_util_no_tests_dir=true \
  -Dbuck.logging_config_file="${BUCK_DIRECTORY}"/config/logging.properties \
  -Dbuck.path_to_python_interp="${PYTHON_INTERP_FALLBACK}" \
  -Dbuck.path_to_buck_py="${PATH_TO_BUCK_PY}" \
  -Dbuck.path_to_compile_asset_catalogs_py="${PATH_TO_COMPILE_ASSET_CATALOGS_PY}" \
  -Dbuck.path_to_compile_asset_catalogs_build_phase_sh="${PATH_TO_COMPILE_ASSET_CATALOGS_BUILD_PHASE_SH}" \
  -Dbuck.path_to_intellij_py="${BUCK_DIRECTORY}"/src/com/facebook/buck/command/intellij.py \
  -Dbuck.path_to_static_content="${BUCK_DIRECTORY}"/webserver/static \
  -Dbuck.path_to_pex="${BUCK_DIRECTORY}"/src/com/facebook/buck/python/pex.py \
  -Dbuck.git_commit="${BUCK_CURRENT_VERSION}" \
  -Dbuck.git_commit_timestamp="${BUCK_VERSION_TIMESTAMP}" \
  -Dbuck.git_dirty="${BUCK_REPOSITORY_DIRTY}" \
  -Dbuck.quickstart_origin_dir="${BUCK_DIRECTORY}"/src/com/facebook/buck/cli/quickstart/android \
  -Dbuck.version_uid="${BUCK_VERSION_UID}" \
  -Dbuck.dx="${BUCK_PATH_TO_CUSTOM_DX}" \
  -Dbuck.buckd_dir="${BUCKD_DIR}" \
  -Dbuck.android_agent_path="${BUCK_DIRECTORY}"/assets/android/agent.apk \
  -Dlog4j.configuration=file:"${BUCK_DIRECTORY}"/config/log4j.properties)

BUCK_JAVA_ARGS+=($BUCK_PROJECT_JAVA_ARGS)
BUCK_JAVA_ARGS+=($BUCK_EXTRA_JAVA_ARGS)

# To debug BUCK, set BUCK_DEBUG_MODE in your environment to anything non-empty,
# then connect to port 8888.
if [ "$BUCK_DEBUG_MODE" ]; then
  BUCK_JAVA_ARGS+=("-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8888")
fi

# To debug the Soy templates in the buckd web server,
# set BUCK_DEBUG_SOY in your environment to anything non-empty.
if [ "$BUCK_DEBUG_SOY" ]; then
  BUCK_JAVA_ARGS+=("-Dbuck.soy.debug=true")
fi
