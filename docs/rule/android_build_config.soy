{namespace android_build_config}

/***/
{template .soyweb}
  {call buck.page}
    {param title: 'android_build_config()' /}
    {param prettify: true /}
    {param content}

{call buck.rule}
{param status: 'UNFROZEN' /}
{param overview}
An <code>android_build_config()</code> rule is used to generate
a <code>BuildConfig</code> class with global configuration variables
that other {call buck.android_library /} rules can compile against.
Currently, the only variable exposed by <code>BuildConfig</code> is
a global <code>boolean</code> named <code>DEBUG</code>, much like
the <code>BuildConfig.java</code> generated by the official Android
build tools based on Gradle.
<p>
<p>
The fields in the generated <code>BuildConfig</code> class will
be non-constant-expressions (see{sp}
<a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.28">JLS 15.28</a>).
However, if <code>BuildConfig</code> is packaged into an APK, it will
be replaced with a new version where:
<ul>
  <li>The fields will be set to literal values (i.e., constant expressions).
  <li>The <code>boolean BuildConfig.DEBUG</code> field will correspond to
that of the <code>package_type</code> argument to the {call buck.android_binary /} rule
that is packaging it.
</ul>
This transformation is done before ProGuard is applied (if applicable), so
that it can propagate constants from <code>BuildConfig</code> and eliminate
dead code.
{/param}

{param args}

{call buck.arg}
  {param name: 'name' /}
  {param desc}
  The name of the rule.
  {/param}
{/call}

{call buck.arg}
  {param name: 'package' /}
  {param desc}
  Name of the Java package to use in the generated <code>BuildConfig.java</code> file.
  Most developers set this to the application id declared in the manifest
  via <code>&lt;manifest package="APP_ID"&gt;</code>.
  Example: <code>com.facebook.orca</code>.
  {/param}
{/call}

/*
Technically, the deps argument exists, but there is no use for it yet.
{call buck.arg}
  {param name : 'deps' /}
  {param default : '[]' /}
  {param desc}
{/call}
*/

{call buck.visibility_arg /}

{/param} // close args

{param examples}
<p><p>
Here is an example of an <code>android_build_config()</code> rule that
is transitively included by both <em>debug</em> and <em>release</em> versions
of an {call buck.android_binary /} rule. The value
of <code>com.example.pkg.BuildConfig.DEBUG</code> will be different in each APK
even though they both transitively depend on the same <code>:build_config</code> rule.

{literal}<pre class="prettyprint lang-py">
android_build_config(
  name = 'build_config',
  package = 'com.example.pkg',
)

# The .java files in this library may contain references to the boolean
# com.example.pkg.BuildConfig.DEBUG because :build_config is in the deps.
android_library(
  name = 'mylib',
  srcs = glob(['src/**&#47;*.java']),
  deps = [
    ':build_config',
  ],
)

android_binary(
  name = 'debug',
  package_type = 'DEBUG',
  keystore =  '//keystores:debug',
  manifest = 'AndroidManifest.xml',
  target = 'Google Inc.:Google APIs:19',
  deps = [
    ':mylib',
  ],
)

android_binary(
  name = 'release',
  package_type = 'RELEASE',
  keystore =  '//keystores:release',
  manifest = 'AndroidManifest.xml',
  target = 'Google Inc.:Google APIs:19',
  deps = [
    ':mylib',
  ],
)
</pre>{/literal}
{/param}

{/call} // close buck.rule

    {/param}
  {/call}
{/template}
